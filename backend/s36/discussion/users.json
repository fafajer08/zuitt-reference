// CRUD - create, read, update, delete

// To change database use ('use')
// Create
// InsertOne () || InsertMany()

/*
  -used to insert one || used to insert many 
  Syntax:
  db.collectionName.insertOne({object})
  db.collectionName.insertMany([{object}, {object}])

*/
// Syntax: insertOne()

db.users.insertOne({
  firstName: "Jane",
  lastName: "Doe",
  age: 21,
  contact: {
    phone: "87654321",
    email: "janedoe@gmail.com"
  },
  courses: ["CSS", "Javascript", "Python"],
  department: "none"
});
// Syntax: insertMany()
db.users.insertMany ([
  {
  firstName: "Stephen",
  lastName: "Hawking",
  age: 76,
  contact: {
    phone: "87654321",
    email: "stephenhawkin@gmail.com"
  },
  courses: ["Python", "React", "PHP"],
  department: "none"
  },

  {
    firstName: "Neil",
    lastName: "Armstrong",
    age: 82,
    contact: {
      phone: "87654321",
      email: "neilarmstrong@gmail.com"
    },
    courses: ["React", "Laravel", "Sass"],
    department: "none"
    },

]);

// Read/Finding Documents
// findOne || find
/*
    Syntax:
    db.collectionName.findOne/find({field: value});
*/
// find the first
db.users.findOne();

// findSpecific
db.users.findOne({firstName: "Stephen"});

// findMany
db.users.find({department: "none"});
// findMany monst specific
db.users.find({department: "none", age: 82});


// Update
// updateOne || updateMany
/*
    Syntaxt:
    db.collectioName.updateOne({fieldA: valueA}, { $set: {fieldB: valueB}});
*/

db.users.insertOne({
  firstName: "Test",
  lastName: "Test",
  age: 0,
  contact: {
    phone: "12345678",
    email: "test@gmail.com"
  },
  courses: [],
  department: "none"
});

db.users.updateOne(
  { firstName: "Test"},
  {
    $set: {
      firstName: "Bill ",
      lastName: "Gates",
      age: 65,
      contact: {
        phone: "12345678",
        email: "bill@gmail.com"
      },
      courses: ["PHP", "Laravel", "HTML"],
      department: "Operations",
      status: "active"
    }
  }
)

db.users.updateMany (
  { department: "none"},
  {
    $set: {
      department: "HR"
    }
  }
)


// Comparison Query Operators
// Greater than(gt) || greater than or equal(gte)
/*
  Syntax:
  db.collectionName.find({field: {$gt/gte: value}});
*/

db.users.find({ age: {$gt: 50}});
db.users.find({ age: {$gte: 50}});

// Less than(lt) || less than or equal(lte)
/*
  Syntax:
  db.collectionName.find({field: {$lt/lte: value}});
*/

db.users.find({ age: {$lt: 50}});
db.users.find({ age: {$lte: 50}});

// Not equal operator (ne)
/*
  Syntax:
  db.collectionName.find({field: {$ne: value}});
*/

db.users.find({age: {$ne: 82}});

// In operator (in)
/*
  Syntax:
  db.collectionName.find({field: {$in: [value, value]}});
*/

db.users.find( { lastName: { $in: [ "Hawking", "Doe"]}});
db.users.find( { courses: { $in: [ "HTML", "React"]}});

// Or Operator (or)
/*
  Syntax:
  db.collectionName.find({ $or: [{fieldA: valueA}, {fieldB: valueB}]});
*/

db.users.find ({ $or: [ {firstName: "Neil"}, {age: "25"}]});
db.users.find ({ $or: [ {firstName: "Neil"}, {age: { $gt: 30}}]});

// Field Projection 
// Inclusion(1) || Exclusion(0)
/*
  Syntax:
  db.collectionName.find({criteria}, {field: 1/0});
*/

// Inclusion(1)
db.users.find(
  {
    firstName: "Jane"
  },
  {
    firstName: 1,
    lastName: 1,
    contact: 1
  }
);

// Exclusion(0)
db.users.find(
  {
    firstName: "Jane"
  },
  {
    contact: 0,
    department: 0
  }
);

db.users.find(
  {
    firstName: "Jane"
  },
  {
    firstName: 1,
    lastName: 1,
    contact: 1,
    _id: 0
  }
);

// Evaluation Query Operators
// Regex Operator
/*

  - allows us to find documents that match a regular expression.
  Syntax:
  db.collectionName.find({fiels; $regex: 'pattern', $options: optionValue});

*/

// Case sensitive query
db.users.find({firsName: {$regex: 'N'}});

// Case insensitive query
db.users.find({ firstName: {$regex: 'j', $options: 'i'}});